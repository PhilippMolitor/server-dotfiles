#!/usr/bin/env python3
import os
import sys
import re
import urllib.request
import json


# variables
SSH_PATH='{}/.ssh'.format(os.getenv('HOME'))
AUTHORIZED_KEYS_FILE='{}/authorized_keys'.format(SSH_PATH)
GITHUB_USERS=[]
SSH_KEYS=[]
RE_VALID_USER=re.compile(r"^[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$", re.IGNORECASE)

# log to terminal
def log(text, error=False):
    if error:
        print('[\033[91mx\033[0m] {}'.format(text))
    else:
        print('[\033[92m+\033[0m] {}'.format(text))

# get a list of keys for a github user
def fetch_user_keys(username):
    keys = []

    try:
        with urllib.request.urlopen('https://api.github.com/users/{}/keys'.format(username)) as f:
            data = json.loads(f.read().decode('utf-8'))
            if len(data) >= 1:
                for key in data:
                    try:
                        keys.append(key['key'])
                    except:
                        pass
            else:
                raise Exception('user "{}" has no public keys!'.format(username))
    except:
        raise Exception('failed to fetch data for user "{}"!'.format(username))

    if len(keys) < 1:
        raise Exception('error looking up user "{}"!'.format(username))

    return keys

# parse the commandlin, re.IGNORECASEe
if len(sys.argv) >= 2:
    for i in range(1, len(sys.argv)):
        user = sys.argv[i]

        if RE_VALID_USER.match(user):
            GITHUB_USERS.append(user)
        else:
            log('invalid user "{}": will not be added'.format(user), error=True)
else:
    log('please supply a list of users to be added to the authorized_keys list!', error=True)
    exit(1)

# gather keys for each user
for u in GITHUB_USERS:
    try:
        keyset = fetch_user_keys(u)
        if len(keyset) > 0:
            for key in keyset:
                SSH_KEYS.append(key)
            log('fetched {} keys for user "{}"'.format(len(keyset), u))
    except Exception as e:
        log(str(e), error=True)

# append all gathered keys to the authorized_keys file


